Nếu edit lại file đã commit  thì thay -m "abcdef" thành --amend : 
    nó sẽ không thêm commit mới mà gộp vào commit trc đó

Từ lần push thứ 2 của pull request thì thêm thuộc tính -f vào sau để khỏi update lại code trên github:
    git push origin tmdu -f

Kéo code từ branch trên git về : 
    git checkout main : thay main or tên branch cần Kéo
    git pull origin main 

Xóa branch : git branch -D test : thay test thành tên branch cần xóa


Biến môi trường : 
    + gõ console : printenv để xem các biến môi trường
        // printenv | grep APP : để xem các biến môi trường bắt đầu bằng APP
    + Tạo các biến enviroment (Linux):
        - tạo thư mục sh trong thư mục gốc, sau đó tạo 2 file trong thư mục sh : env.sh và env.example.sh 
            // env.sh : config chính, thường k up lên git
            // env.example.sh : mẫu config để cấu hình, up lên để khi clone về có cái mà xem :))
        - trước khi npm start thì phải chạy source sh/env.sh để khởi tạo vì khi kill terminal sẽ bị mất.
        - để sử biến môi trường thì dùng process.env.TenBien (process.env.4HOST)

 
Bower : là một công cụ quản lý resource cho lập trình front-end được open source bởi Twitter. 
    Bower giúp tìm kiếm, cài đặt, nâng cấp và cố định dependency cho một front-end project:
    + install : npm i -g bower : bắt buộc có -g ms xài đc bower cmd
    + install thư viện : bower install boostrap#4.0.0 
        // bower install boostrap#4.0.0 --save : sẽ tự thêm vào dependencies trong file json
    + chúng ta có thể thêm 2 file ở thư mục gốc: 
        bower.json : tương tự như bower init,
        .bowerrc : cấu hình bower như : đường dẫn...
            - { "directory": "src/public" } : đường dẫn khi tải về là src/public
    + Giống như các dependency manager khác, chúng ta có thể định nghĩa một tập các dependency vào một file bower.json 
        và để câu lệnh bower đọc file đó (thay cho việc phải gõ bower install x n lần với n thư viện).
        - bower init : khởi tạo bower.json ở thư mục gốc
                {
                "name": "awesome_proj",
                "version": "0.0.0",
                "authors": [
                    "HoangThien"
                ],
                "license": "",
                "dependencies": {
                    "bootstrap": "~3.2.0"
                },
                "dependencies": {
                    "bower_components": "https://github.com/thiend17p03/tdmu-chat-bower.git"
                },
                }

        + bower install : Khi muốn tải hết các thư viện trong json.
        + Các câu lệnh khác : ex :  bower search normalize
            - search hihi : tìm kiếm hihi trong bower
            - list : liệt kê nhanh các dependencies
            - info boostrap : xem thông tin cụ thể về boostrap
            - lookup boostrap : xem đường dẫn cài đặt boostrap
            - uninstall boostrap --save : gỡ cài đặt boostrap đồng thời cập nhật trong thông tin tương ứng trong bower.json
}
 

  mở PowerShell -> Run Aministration ->  Set-ExecutionPolicy RemoteSigned :
    bower.ps1 cannot be loaded because running scripts is disabled on this system

    export nhiều biến : 
        const authController = require('./authController')
        const homeController = require('./homeController')
        export const home = homeContrller;
        export const auth = authController;

        import {home,auth} from {./../controller}



Socket.io là một module trong Node.js được phát triển vào năm 2010. 
Socket.io xây dựng dựa trên Engine.IO, đầu tiên nó sẽ thiết lập một kết nối long-polling, 
    sau đó cố gắng nâng cấp lên các kết nối khác tốt hơn giống như WebSocket.

Tiền đề chính của Engine, và cốt lõi của sự tồn tại của nó, là khả năng hoán đổi các phương tiện giao thông một cách nhanh chóng.
    Một kết nối bắt đầu dưới dạng xhr-polling, nhưng nó có thể chuyển sang WebSocket.

Trong long-polling, client sẽ gửi yêu cầu giống AJAX đến máy chủ. 
    Với mỗi lần nhận được yêu cầu, máy chủ sẽ gửi phản hồi lại nếu & khi có cập nhật mới. Tại đây, clients sẽ liên tục & định kỳ yêu cầu cập nhật từ máy chủ,
     thông qua các kết nối TCP riêng biệt, làm tắc nghẽn lưu lượng mạng.

Trong short-polling, clients định kỳ gửi yêu cầu đến máy chủ để hỏi xem có gì mới không.
    Máy chủ không đợi, nhưng gửi lại nếu có cập nhật hoặc chỉ có tin nhắn trống. 
     Ở đây, mạng thậm chí còn tắc nghẽn hơn với các yêu cầu liên tục này, ngay cả khi không có bản cập nhật.

Trong WebSockets, sẽ luôn có một kết nối TCP giữa clients và server. 
    Có luồng dữ liệu hai chiều giữa clients và server cũng như tính chất thời gian thực do luôn kết nối TCP mở. 
     Trong các phương thức, có tiềm năng rất lớn để tăng tốc độ trong WebSockets. 
      Dung lượng phần header của giao thức HTTP là 100 byte, trong khi phần header của socket chỉ là 2 byte. 
       Vì vậy, sau khi sử dụng HTTP ban đầu, Sockets có thể giao tiếp với tài nguyên ít hơn nhiều. Với nhiều số lượng yêu cầu được gửi đến thì nó cũng sẻ làm tăng thời gian phản hồi từ server tới clients.

Cơ chế hoạt động của một ứng dụng realtime đó là thông qua server để lắng nghe (listen) data và truyền data về các máy client.
    Vì vậy cần cài khai báo sử dụng socketio ở cả phía server và client.
     Để lắng nghe data, ta sử dụng câu lệnh socket.on(), để phát dữ liệu thì sử dụng lệnh socket.emit() .


socket.io : Socket.IO cho phép giao tiếp dựa trên sự kiện hai chiều theo thời gian thực. Nó bao gồm:
        + một máy chủ Node.js (kho lưu trữ này)
        + thư viện ứng dụng khách Javascript cho trình duyệt (hoặc ứng dụng khách Node.js)
    Các tính năng của nó : bảo mật, birnary, tự động kết nối, phát hiện ngắt kết nối, ghép kênh, tạo phòng,..
             io.on("connection", (socket) => {

                // sending to the client
                socket.emit("hello", "can you hear me?", 1, 2, "abc");

                // sending to all clients except sender
                socket.broadcast.emit("broadcast", "hello friends!");

                // sending to all clients in "game" room except sender
                socket.to("game").emit("nice game", "let's play a game");

                // sending to all clients in "game1" and/or in "game2" room, except sender
                socket.to("game1").to("game2").emit("nice game", "let's play a game (too)");

                // sending to all clients in "game" room, including sender
                io.in("game").emit("big-announcement", "the game will start soon");

                // sending to all clients in namespace "myNamespace", including sender
                io.of("myNamespace").emit("bigger-announcement", "the tournament will start soon");

                // sending to a specific room in a specific namespace, including sender
                io.of("myNamespace").to("room").emit("event", "message");

                // sending to individual socketid (private message)
                io.to(socketId).emit("hey", "I just met you");

                // WARNING: `socket.to(socket.id).emit()` will NOT work, as it will send to everyone in the room
                // named `socket.id` but the sender. Please use the classic `socket.emit()` instead.

                // sending with acknowledgement
                socket.emit("question", "do you think so?", (answer) => {});

                // sending without compression
                socket.compress(false).emit("uncompressed", "that's rough");

                // sending a message that might be dropped if the client is not ready to receive messages
                socket.volatile.emit("maybe", "do you really need it?");

                // sending to all clients on this node (when using multiple nodes)
                io.local.emit("hi", "my lovely babies");

                // sending to all connected clients
                io.emit("an event sent to all connected clients");


            
            });

    